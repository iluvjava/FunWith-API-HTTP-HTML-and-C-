<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyDatastructure</name>
    </assembly>
    <members>
        <member name="T:MyDatastructure.Maps.IMap`2">
            <summary>
            An interface for my own set implementation.
            <para>
            Whether it handles null key depends on implementations. 
            </para>
            </summary>
        </member>
        <member name="P:MyDatastructure.Maps.IMap`2.Item(`0)">
            <summary>
            No such key excpetion!
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:MyDatastructure.Maps.IMap`2.Remove(`0)">
            <summary>
            Removes the key and return the value of the key.
            </summary>
            <param name="key"></param>
            <returns>
            null is returned if the key is not in the map, null returned
            doesn't always mean the key is not in the map.
            </returns>
        </member>
        <member name="M:MyDatastructure.Maps.IMap`2.ContainsKey(`0)">
             <summary>
            
             </summary>
             <param name="key"></param>
             <returns>
            
             </returns>
        </member>
        <member name="T:MyDatastructure.Maps.SysDefaultMap`2">
             <summary>
             Uses the system default Idictionary for the implementation for IMap.
            
             </summary>
             <typeparam name="K"></typeparam>
             <typeparam name="V"></typeparam>
        </member>
        <member name="T:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1">
            <summary>
            This will be the simplest Binary Heap imaginable.
            0 index will be a dummy
            Null is not a accepted value.
            </summary>
        </member>
        <member name="F:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.HeapArray">
            <summary>
            index 0 is dummy.
            </summary>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.#ctor">
            <summary>
            Get an instance of the Binary Heap.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.#ctor(`0[],System.Int32,System.Int32)" -->
        <member name="M:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.Contains(`0)">
            <summary>
            Not supported for this class.
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.Enqueue(`0)">
            <summary>
            add a new element into the queue.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.Remove(`0)">
            <summary>
            Not supported.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.RemoveMin">
            <summary>
            Remove the minimum element from the queue.
            </summary>
            <throw>
            InvalidOperationException is the heap is empty when
            trying to remove elements. 
            </throw>
            <returns></returns>
        </member>
        <member name="M:MyDatastructure.PriorityQueue.SimpleBinaryHeap`1.GetParentIndex(System.Int32)">
             <summary>
            
             </summary>
             <param name="arg"></param>
             <returns></returns>
        </member>
        <member name="T:MyDatastructure.PriorityQ.IPriorityQ`1">
            <summary>
            this is an interface for priorityqueue.
            </summary>
        </member>
        <member name="M:MyDatastructure.PriorityQ.IPriorityQ`1.Contains(`0)">
            <summary>
            Return true or false if the current element is in the queue. 
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:MyDatastructure.PriorityQ.IPriorityQ`1.Enqueue(`0)">
            <summary>
            Equeue the element into the queue. 
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:MyDatastructure.PriorityQ.IPriorityQ`1.Peek">
            <summary>
            Get an reference from the first element in the queue. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyDatastructure.PriorityQ.IPriorityQ`1.Remove(`0)">
            <summary>
            Remove the element from the queue. 
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:MyDatastructure.PriorityQ.IPriorityQ`1.RemoveMin">
            <summary>
            Remove and get a reference of the first memeber of the queue. 
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:MyDatastructure.MyLittleArrayHeapPriorityQueue`1">
            <summary>
            This is a min heap using 4 children heap structure.
            <para>
            - Null elements are not allowed in this datastructure.
            </para>
            </summary>
            <typeparam name="T">
            T as a comparable Type for the class.
            </typeparam>
        </member>
        <member name="F:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.ArrayHeap">
            <summary>
            The array that stores the heap structure inside. 
            </summary>
        </member>
        <member name="F:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.CustomizedComparer">
            <summary>
            The comparer set by the client, null by default if client didn't set it. 
            </summary>
        </member>
        <member name="F:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.ElementCount">
            <summary>
            The number of elements in the heap, including the repetition.
            </summary>
        </member>
        <member name="F:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.Frequencies">
            <summary>
            A int[] where if the element in the array heap, then the same index in the Frequencies 
            array is the frequencies of that element. 
            </summary>
        </member>
        <member name="F:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.HeapChildrenCount">
            <summary>
            The number of children that each parent has in the heap. 
            </summary>
        </member>
        <member name="F:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.Indices">
            <summary>
            A map that stores all the index of the element in the heap array. 
            </summary>
        </member>
        <member name="F:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.UniqueElementCount">
            <summary>
            The number of unique elements in the array, it's for manaing the heap. 
            </summary>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.#ctor(MyDatastructure.Maps.IMap{`0,System.Int32},System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Construct an istance of the The array Heap. 
            </summary>
            <param name="IndexMap">
            The type of Maps inplementations you want for storing the 
            index of element interally. This greatly affects speed. 
            </param>
            <param name="heapchildrecount">
            Change the number of children each parent has. larger than 1.
            </param>
            <param name="initialHeapSize">
            The initial size of the heap array. 
            </param>
            <param name="comparer">
            The comparer you want to use for the element.
            </param>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.#ctor">
            <summary>
            Construct an instance of the MyLittleArrayHeapPriorityQueue.
            </summary>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.#ctor(System.Collections.Generic.IComparer{`0})">
            <summary>
            Construct an instance of the MyLittleArrayHeapPriorityQueue.
            </summary>
            <param name="arg">
            The Comparer you want to use for ordering elements. 
            </param>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.ArrayElementSwapHelper``1(System.Int32,System.Int32,``0[])">
            <summary>
            A helper methods that swaps any array.
            </summary>
            <typeparam name="R"></typeparam>
            <param name="a"></param>
            <param name="b"></param>
            <param name="arr"></param>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.BuildHeap``1(``0[])">
            <summary>
            it will use Floyd buildheap algorithm, it will not modify the inputs.
            </summary>
            <return>
            A new heap that made from the Floyd Buildheap Algorithm.
            </return>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.Enqueue(`0)">
            <summary>
            Enqueue an element in to the queue. Element cannot be repeated nor it can be
            null.
            </summary>
            <param name="arg"></param>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.Peek">
            <summary>
            Get a reference for the first element in the queue. 
            </summary>
            <returns>
            a reference for the first element in the queue. 
            </returns>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.Remove(`0)">
            <summary>
            Null is not welcome in this queue.
            </summary>
            <param name="arg"></param>
            <Exception>
            Illegal argument exception if given argument with dafault value, or the element
            is not already presented in the queue.
            </Exception>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.RemoveMin">
            <summary>
            Remove the smallest element from the priority queue.
            </summary>
            <returns>
            Reference to the smaller element in the queue.
            </returns>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.AutomaticResize">
            <summary>
            Check the last element in the array and satruation to see if there is the need
            for resizing.
            </summary>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.CallCompare(`0,`0)">
            <summary>
            arg1.Compareto(arg2)
            </summary>
            <param name="arg1"></param>
            <param name="arg2"></param>
            <returns></returns>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.GetFirstChildIndex(System.Int32)">
            <summary>
            Get the first index of the heap. Internal use only. 
            </summary>
            <param name="arg"></param>
            <returns></returns>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.GetParentIndex(System.Int32)">
            <summary>
            Return the index of the parent of the element at the current index in the array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.Percolate(System.Int32)">
            <summary>
            Percolate the element up, or down.
            </summary>
            <param name="arg"></param>
            <returns>
            The index which the element ended up with.
            </returns>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.PercolateDown(System.Int32,System.Boolean)">
            <summary>
            Percolate the element down and return the index that it ended up to.
            </summary>
            <param name="arg"></param>
            <param name="heapbuilding">
            True if the method is called under the context of floyd build heap. 
            </param>
            <returns>
            The final place in the heap that the element ended up to.
            </returns>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.PercolateUp(System.Int32)">
            <summary>
            Returns the new index that the elements has been percolated up to.
            </summary>
            <param name="arg"></param>
            <returns>
            The index that the element got ended up with.
            </returns>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.Register(`0)">
             <summary>
            
             </summary>
             <param name="arg"></param>
             <returns>
             True if the element is NEW! (Yes, percolate, add it to the index map! )
             </returns>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.Resign(`0)">
            <summary>
            remove or decrement the element from the Frequency map.
            </summary>
            <param name="arg"></param>
            <returns>
            True if the element should be removed from the index map too.
            Else false.
            </returns>
        </member>
        <member name="M:MyDatastructure.MyLittleArrayHeapPriorityQueue`1.Swap(System.Int32,System.Int32,System.Boolean)">
             <summary>
             Swap 2 elements in the heap array. It will update all things.
             </summary>
             <param name="arg1"></param>
             <param name="buildheapmode">True if it's called by buildheap method</param>
             <param name="arg2"></param>
             
            
        </member>
        <member name="T:MyDatastructure.Sorting.EquestriaCreatures">
            <summary>
            It's for demonstrating/ testing hybrid comparer.
            </summary>
        </member>
        <member name="T:MyDatastructure.Sorting.HybridComparer`1">
            <summary>
            Takes in a list of unique comparers.
            And compare then one by one。
            This is an OOP Approach for a robust Sorting system.
            </summary>
        </member>
        <member name="M:MyDatastructure.Sorting.HybridComparer`1.#ctor(System.Collections.Generic.IComparer{`0}[])">
            <summary>
            Create an instance of the hybrid comparer using other different kinds of IComparer
            of that type.
            </summary>
            <param name="args"></param>
        </member>
        <member name="M:MyDatastructure.Sorting.HybridComparer`1.#ctor(MyDatastructure.Sorting.GenericCompare{`0}[])">
            <summary>
            Create an instance of the HybridComparer.
            </summary>
            <param name="args">
            A list of delegate, GenericCompare is defined in this name space. 
            </param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:MyDatastructure.Sorting.HybridComparer`1.Compare(`0,`0)" -->
        <member name="T:MyDatastructure.Sorting.HybridStableComparer`1">
            <summary>
            This class takes into the the position of the element in the array into account.
            </summary>
        </member>
        <member name="T:MyDatastructure.UnionFind.ArrayDisjointSet`1">
            <summary>
            Disjoint set implemented by forest in array. 
            </summary>
        </member>
        <member name="M:MyDatastructure.UnionFind.ArrayDisjointSet`1.CreateSet(`0)">
            <summary>
            Element can not be null. 
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:MyDatastructure.UnionFind.ArrayDisjointSet`1.IsSameSet(`0,`0)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>
            True if both of the element are joined to the same set. 
            </returns>
        </member>
        <member name="M:MyDatastructure.UnionFind.ArrayDisjointSet`1.Join(`0,`0)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:MyDatastructure.UnionFind.IDisjointSet`1.CreateSet(`0)">
            <summary>
            Register the element its own set. 
            If a already in it, then do nothing. 
            </summary>
            <param name="a"></param>
        </member>
        <member name="M:MyDatastructure.UnionFind.IDisjointSet`1.Join(`0,`0)">
            <summary>
            Join 2 elements into the same set. 
            - if they are already in it, do nothing.
            - if any one of them are not in the set, throw exception.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
        </member>
        <member name="M:MyDatastructure.UnionFind.IDisjointSet`1.FindSet(`0)">
            <summary>
            Return the integer representative of a set. 
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:MyDatastructure.UnionFind.IDisjointSet`1.IsSameSet(`0,`0)">
            <summary>
            True if they are in the samne set. 
            - All element is in the same set as itself. 
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:MyDatastructure.UnionFind.IDisjointSet`1.GetRepresentative(`0)">
            <summary>
            Return the representative of the element. 
            - If the element is registered yet, throw exception.
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
    </members>
</doc>
