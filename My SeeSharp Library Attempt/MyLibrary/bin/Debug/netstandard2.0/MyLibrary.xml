<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyLibrary</name>
    </assembly>
    <members>
        <member name="T:APIs.IDBImage">
            <summary>
            This interface defines the field of an images json object in te
            </summary>
        </member>
        <member name="T:APIs.APIs">
            <summary>
            This class contains static method that are associated with 
            parsing JSON. 
            </summary>
        </member>
        <member name="M:APIs.APIs.JsonDecode(System.String)">
            <summary>
            Give a string, the method change json into a dictionary,
            mapping from string to object, could be list, json, or string
            </summary>
            <remarks>
            object might be the following, but not limitd to
                Newtonsoft.Json.Linq.JObject => Acts like a Idict
                string.
            </remarks>
            <param name="jsonstr">
            A string representation of the json object to parse.
            </param>
            <returns>
            An Idict.
            </returns>
        </member>
        <member name="M:APIs.APIs.JsonToJObject(System.String)">
             <summary>
             This function will parse the string representing a json to an
             instance of the JObject.
             </summary>
             <param name="arg">
             A string representation of the JObject.
             </param>
             <returns>
            
             </returns>
        </member>
        <member name="T:APIs.DB">
             <summary>
             A class contains all the method for the Derpibooru API.
             <see cref="!:https://derpibooru.org/pages/api"/>
             </summary>
            
        </member>
        <member name="F:APIs.DB.MLC">
            <summary>
            The MLC instance can be customized
            </summary>
        </member>
        <member name="F:APIs.DB.SearchEndpoint">
            <summary>
            The DB search endpoint for the API. 
            </summary>
        </member>
        <member name="F:APIs.DB.TodayImages">
            <summary>
            This is the endpoint to today's images to derpibooru.
            </summary>
        </member>
        <member name="M:APIs.DB.ConverToDBImage(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Given a Jtoken, this method will convert it to an instance of the IDBImage.
            </summary>
            <param name="j">
            The Jtoken as an instance representing the image object in the response from the
            DB api.
            </param>
            <returns>
            An DBImage referred as an IDBImage.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:APIs.DB.GetMainpageImages(System.Int32)" -->
        <member name="M:APIs.DB.GetTodayImages">
            <summary>
            Gets today's images from derpibooru, the end point targeted is:
            https://derpibooru.org/images.json
            </summary>
            <returns>
            The object representing the Json.
            </returns>
        </member>
        <member name="M:APIs.DB.GetTodayImagesAsync">
            <summary>
            Async method for getting today's images. 
            </summary>
            <returns></returns>
        </member>
        <member name="M:APIs.DB.SearchDB(System.String,System.Int32,System.Int32)">
            <summary>
            This method performs a search on the DB api and return the result. 
            </summary>
            <param name="strquery">The query string</param>
            <returns></returns>
        </member>
        <member name="T:APIs.DBImage">
             <summary>
             This class represents an image object in the json response from the derpibooru apis.
            
             </summary>
        </member>
        <member name="T:APIs.DAArtistwork">
            <summary>
            This class represents a specific domain.
            - There is a possibility that we get the new beta theme for the DA
              this means we have to distinguish them.
            </summary>
        </member>
        <member name="M:APIs.DAArtistwork.GetInstance(System.String)">
            <summary>
            Create an instance of the DA object
            </summary>
            <remarks>
            This function is pivotal.
            </remarks>
            <param name="url"></param>
            <returns>
            An instance of DA opened with the given URL.
            </returns>
            <excpetion>
            An incorrect URL exeception is thrown if the input url doesn't match the
            regex: ^https?://www.deviantart.com.*$
            Other excpetion might be thrown from Webpage class.
            </excpetion>
        </member>
        <member name="M:APIs.DAArtistwork.GetDownloadLink">
            <summary>
            ----------------Method under testing--------------------------------
            An internal method that searches for the download link for the image on the page.
                - If the download btn is on the page
                    - the link for the dl btn is returned
                - the src link for the main image on the page is returned.
            </summary>
            <returns>
            A string that contains the resource of the image.
            Null will be returned if it's not there:
            <remarks>
            It heppens if mobile client content is loaded.
            </remarks>
            </returns>
        </member>
        <member name="M:APIs.DAArtistwork.SaveImageAsync(System.String)">
            <summary>
            This method attemps to save images from the DA website.
            </summary>
            <returns>
            True or false to indicate the status.
            </returns>
        </member>
        <member name="T:LittleRestClient.RequestCustomizer">
            <summary>
            This is a swappable parts for the MyLittleRestClient class, using this
            to customized your own web request when making a request.
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="T:LittleRestClient.URLENCODEMODE">
            <summary>
            Different ways of encoding get parameters into the url.
            </summary>
        </member>
        <member name="F:LittleRestClient.URLENCODEMODE.EscapeData">
            <summary>
            Space is %20, it's using escape datastring. 
            </summary>
        </member>
        <member name="F:LittleRestClient.URLENCODEMODE.UnicodeURL">
            <summary>
            Space is +, it's usring URLEncode.
            </summary>
        </member>
        <member name="T:LittleRestClient.MyLittleRestClient">
            <summary>
            This is a class that encapusulate a client, and it automate the process of making different
            kinds of request to different urls.
            - The cookies is saved and automatically used when using this client.
            - Support delegate for customizable headers for request.
            </summary>
        </member>
        <member name="F:LittleRestClient.MyLittleRestClient.SharedCookies">
            <summary>
            This is shared when it's specified.
            </summary>
        </member>
        <member name="M:LittleRestClient.MyLittleRestClient.MakeGetRequest(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
             <summary>
             Make a get request for the given url
             </summary>
             <param name="url">
             Abosolute URL please.
             <param name ="parameters">
             A dictionary from string to string to represents the data parameters for
             the get request.
             </param>
             </param>
             <returns>
            
             </returns>
        </member>
        <member name="M:LittleRestClient.MyLittleRestClient.MakeGetRequest(System.String,System.String)">
            <summary>
            This method returns a IRestResponse when given an url with a 
            query string. 
            </summary>
            <param name="url">
            The url to make get request. 
            </param>
            <param name="querystring">
            The querystring for the get request. 
            </param>
            <returns>
            IRestResponse. 
            </returns>
        </member>
        <member name="M:LittleRestClient.MyLittleRestClient.MakePostRequest(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            This method makes a posts request with given formdata represented by the
            a string to string dictionary.
            </summary>
            <param name="url">
            A valide absolute url.
            </param>
            <param name="parameters">
            A string => string dic, it has the formdata for the post request.
            </param>
            <returns>
            IRestResponse responsed from the server.
            </returns>
        </member>
        <member name="M:LittleRestClient.MyLittleRestClient.MakPostRequestAsync(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Make an async post request given the parameters for formddata.
            </summary>
            <returns>
            Async task object with a result: IRestResponse.
            </returns>
        </member>
        <member name="M:LittleRestClient.MyLittleRestClient.EncodeGetURLParameters(System.Collections.Generic.IDictionary{System.String,System.String},LittleRestClient.URLENCODEMODE)">
            <summary>
            This method encode the key and value for the url.
            </summary>
            <param name="arg">
            A map that repesents the parameters, if it's null, then the function
            will just return "";
            </param>
            <returns></returns>
        </member>
        <member name="M:LittleRestClient.MyLittleRestClient.PrepareHeaders(RestSharp.IRestRequest)">
            <summary>
            Internal Method only.
            </summary>
        </member>
        <member name="M:LittleRestClient.MyLittleRestClient.PrepareRequest(System.String)">
            <summary>
            Prepare the headers for the IRestRequest that are going to be sent.
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="T:Webpages.AngleSharpBridge">
             <summary>
            
             </summary>
        </member>
        <member name="T:Webpages.Webpage">
            <summary>
            This class represents a single generic websites, it should be useful for many other things.
            </summary>
        </member>
        <member name="F:Webpages.Webpage.base_url">
            <summary>
            The url of the web page that is going to be load.
            </summary>
        </member>
        <member name="F:Webpages.Webpage.content_type">
            <summary>
            The content type as from the header of the response.
            </summary>
        </member>
        <member name="M:Webpages.Webpage.#ctor(System.String)">
             <summary>
            
             </summary>
             <param name="baseurl">
             A url with the correct heading.
             </param>
             <exception>
             An Incorrect URL exception is thrown if the input url is not a valid url.
             </exception>
        </member>
        <member name="P:Webpages.Webpage.raw_content">
            <summary>
            The raw content gotten from the page in the form of a byte array.
            </summary>
        </member>
        <member name="M:Webpages.Webpage.GetFileName">
            <summary>
            Returns the file name if this object is every going to be saved.
            </summary>
        </member>
        <member name="M:Webpages.Webpage.SaveAsFile(System.String,System.String)">
            <summary>
            This method will try to save the content of the website as a file on the disk.
            if file name null
                - If html-> tile and title and use it as the file name.
                - If content-disposition is in the header, use that.
                - else, ues the hashcode as the filename.
            </summary>
            <param name="path">
            The string of the directory.
            </param>
            <returns>
            Boolean to indicate the status.
            </returns>
        </member>
        <member name="M:Webpages.Webpage.GetWebPage">
            <summary>
            GET, byte array, and content type will be established.
            </summary>
        </member>
    </members>
</doc>
